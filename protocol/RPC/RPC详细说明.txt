1.RPC功能目标:
	1.1.RPC的主要功能是让构建分布式计算(应用)更容易，在提供强大的远程调用能力是不损失本地调用的语义简洁性。
		为了实现该目标，RPC框架需提供一种透明调用机制让使用者不必显示地区分本地调用和远程调用，给出了一种
		实现结构就是基于stub的结构来实现。

	1.2.RPC调用分类
		1.2.1.同步调用:
			客户方等待调用执行完成并返回结果
		1.2.2.异步调用
			客户方调用后不用等待执行结果返回，但依然可以通过回调通知等方式获取返回结果。
			若客户不关心调用返回结果，则变成单向异步调用，单向调用不用返回结果。
		1.2.3.异步和同步的区别：是否等待服务端执行完成并返回结果
	1.3.RPC的调用过程:
		RPC服务方通过RpcServer去导出(export)远程接口方法，
		而客户方通过RpcClient去引入(import) 远程接口方法。
		客户方像调用本地方法一样去调用远程接口方法，
		RPC框架提供接口的代理实现，实际的调用将委托给代理RpcProxy。
		代理封装调用信息并将调用转交给RpcInvoker去实际执行。
		在客户端的RpcInvoker通过连接器RpcConnector去维护与服务端的通道RPCChannel，
		并使用RpcProtocol执行协议编码(encode)并将编码后的请求消息通过通道发送给服务方。
		
		RPC服务端接收器RpcAcceptor接收客户端的调用请求，同样使用RpcProtocol执行协议解码(decode).
		解码后的调用信息传递给RpcProcessor去控制处理调用过程，最后在委派调用RpcInvoker去实际执行并返回
		调用结果。

	1.4.RPC组件职责:
		1) RpcServer 负责导出(export)远端接口
		2) RpcClient 负责导入(import)远程接口的代理实现
		3) RpcProxy 远程接口的代理实现
		4) RpcInvoker 客户方实现: 负责编码调用信息和发送调用请求到服务方并等待调用结果返回
					  服务方实现: 负责调用服务端接口的具体实现并返回调用结果
		5) RpcProtocol 负责协议编/解码
		6) RpcConnector 负责维持客户方和服务方的连接通道和发送数据到服务方。
		7) RpcAcceptor 负责接收客户方请求并返回请求结果。
		8) RpcProcessor 负责在服务方控制调用过程，包括管理调用线程池、超时时间等。
		9) RpcChannel 数据传输通道

	1.5.RPC实现分析:
		1) 导出远程接口
			导出远程接口意思是指只有导出的接口可以供远程调用，而未导出的接口则不能用。

			可以导出整个接口，也可以更细粒度一点只导出接口中的某些方法。

			java中有一种特殊的调用就是多态，给每种实现类一个标记。

		2) 导入远程接口与客户端代理
			导入相对于导出远程接口，客户端代码为了能够发起调用必须要获得远程接口的方法。
		3) 协议编解码
			客户端代理在发起调用前需要对调用信息进行编码，这就要考虑需要编码些什么信息并以什么格式传输到
			服务端才能让服务端完成调用。
		4) 传输服务
			协议编码之后，自然就是需要将编码后的RPC请求消息传输到服务方，服务方执行后返回结果消息或确认消息给客户方。

			RPC的应用场景实质上是一种可靠的请求应答消息流。 和HTTP协议类似，因此选择长连接方式的TCP协议更高效。
			连接是由client端发起建立并维持。为了保持连接有必要定时为每个连接发送心跳数据以维持连接不中断。
			心跳消息时RPC框架库使用的内部消息，在前文协议头结构中也有一个专门的心跳位，就是用来标记心跳消息的，它
			对业务应用透明。
		5) 执行调用
			Client Stub所做的事情仅仅是编码消息并传输给服务方，而真正调用过程发生在服务方。Server Stub从前文的结构
			拆解中我们细分了 RpcProcessor(负责控制调用过程) 和 RpcInvoker(负责真正调用--封装了反射调用的实现细节) 两个组件，

		6) RPC异常处理
			1> 本地调用一定会执行，而远程调用则不一定，调用消息可能因为网络原因并未发送到服务方。
			2> 本地调用只会抛出接口声明的异常，而远程调用还会抛出RPC框架运行时的其他异常。
--------------------------------------------------------------------------------------------------------------------------------------
2.如何发布自己的服务???
	2.1.如何让别人使用我们的服务呢???
		-->方式一:告诉使用者服务的ip和port就可以啦。
		   这里的关键在于是自动告知还是人肉告知!!!!!!

		   人肉告知的方式:如果你发现你的服务器一台机器不够，要再添加一台，这个时候就要告诉调用者我现在有两个ip，
		   你们要轮询调用来实现负载均衡；调用者改成调用两台机器啦，结果某一天一台服务器挂了，调用者发现服务器有
		   一个不可用，他又只能手动修改代码来删除挂掉的那台机器的ip。实现生产环境不可能使用人肉方式。

		-->方式二:使用zookeeper用于实现服务自动注册与发现功能。
				  实现的功能:
				  	  能实现自动告知，即机器的增添、剔除对调用方透明。调用者不再需要写死服务提供方地址。
				  总结:zookeeper可以充当一个服务注册表(Service Registry),让多个服务提供者形成一个集群，让服务消费者
				  通过服务注册表获取具体的服务访问地址(ip+port),去访问具体的服务提供者。

	2.2.zookeeper在dubbo框架中的作用:
		zookeeper就是一个分布式文件系统，每当一个服务提供者部署后都要将自己的服务注册到zookeeper的某个路径上:/{service}/{version}/{ip:port},



